services:
  nodejs:
    image: server:1.0.0
    container_name: ${SERVER_HOST}
    build:
      context: ./server
      dockerfile: Dockerfile
    env_file: .env
    ports:
      - ${SERVER_PORT}:${SERVER_PORT}
    volumes:
      - ./server:/server
      - server-v-node-modules:/server/node_modules
    depends_on:
      postgres:
        condition: service_healthy 
    networks:
      - postgres
  postgres:
    image: postgres:1.0.0
    container_name: ${POSTGRES_HOST}
    build:
      context: ./database
      dockerfile: Dockerfile
    env_file: .env
    ports:
      - ${POSTGRES_PORT}:${POSTGRES_PORT}
    volumes:
      - database-v:/var/lib/postgresql/database
    command: "-p ${POSTGRES_PORT}"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -p ${POSTGRES_PORT} -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 5s
      timeout: 5s
      retries: 5
      start_period: 0s
    networks:
      - postgres
  pgadmin:
    container_name: ${PGADMIN_HOST}
    image: dpage/pgadmin4:9.1
    env_file: .env
    volumes:
      - pgadmin-v:/var/lib/pgadmin
    ports:
      - ${PGADMIN_PORT}:80
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 1G
    networks:
      - postgres
volumes:
  server-v-node-modules:
    name: "server-v-node-modules"
  database-v:
    name: "database-v"
  pgadmin-v: 
    name: "pgadmin-v"
networks:
  postgres:
    driver: bridge